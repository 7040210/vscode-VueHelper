{
    "V模板": {
        "prefix": "V",
        "body": [
            "<template>\n\t<div id='${id}'>\n\t\t$0\n\t</div>\n</template>\n\n<script>\nexport default {\n\tname: '${id:name}'\n\n}\n</script>\n\n<style scoped>\n\n</style>"
        ],
        "description": "快速生成vue文件基础模板"
	},
    "VueConfigSilent": {
        "prefix": "VueConfigSilent",
        "body": [
            "Vue.config.silent = ${true}"
        ],
        "description": "取消 Vue 所有的日志与警告。"
    },
    "optionMergeStrategies": {
        "prefix": "VueConfigOptionMergeStrategies",
        "body": [
            "Vue.config.optionMergeStrategies$0"
        ],
        "description": "\t自定义合并策略的选项。\n\t合并策略选项分别接受第一个参数作为父实例，第二个参数为子实例，Vue实例上下文被作为第三个参数传入。"
    },
    "devtools": {
        "prefix": "VueConfigDevtools",
        "body": [
            "Vue.config.devtools = ${true}"
        ],
        "description": "\t配置是否允许 vue-devtools 检查代码。\n\t开发版本默认为 true，生产版本默认为 false。生产版本设为 true 可以启用检查"
    },
    "errorHandler": {
        "prefix": "VueConfigErrorHandler",
        "body": [
            "Vue.config.errorHandler = function (err, vm) {\n\t${// handle error}\n}"
        ],
        "description": "\t指定组件的渲染和观察期间未捕获错误的处理函数。\n\t这个处理函数被调用时，可获取错误信息和 Vue 实例"
    },
     "ignoredElements": {
        "prefix": "VueConfigIgnoredElements",
        "body": [
            "Vue.config.ignoredElements =[$0]"
        ],
        "description": "需使 Vue忽略在Vue 之外的自定义元素,否则，它会假设你忘记注册全局组件或者拼错了组件名称，从而抛出一个关于 Unknown custom element 的警告"
    },
    "keyCodes": {
        "prefix": "VueConfigKeyCodes",
        "body": [
            "Vue.config.keyCodes = {$0}"
        ],
        "description": "给 v-on 自定义键位别名"
    },

    "extend": {
        "prefix": "vueExtend",
        "body": [
           "Vue.extend({\n\ttemplate:${template}\n})"
        ],
        "description": "使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象"
    },
    "nextTick": {
        "prefix": "VueNextTick",
        "body": [
            "Vue.nextTick({\n\t$1\n})"
        ],
        "description": "在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM"
    },
    "set": {
        "prefix": "VueSet",
        "body": [
            "Vue.set({${object}, ${key}, ${value})"
        ],
        "description": "设置对象的属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开 Vue 不能检测属性被添加的限制"
    },
    "delete": {
        "prefix": "VueDelete",
        "body": [
            "Vue.delete(${object}, ${key})"
        ],
        "description": "删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到属性被删除的限制，但是你应该很少会使用它"
    },
    "directive": {
        "prefix": "VueDirective",
        "body": [
            "Vue.directive(${id},${[definition]})"
        ],
        "description": "注册或获取全局指令"
    },
    "filter": {
        "prefix": "VueFilter",
        "body": [
            "Vue.filter(${id},${[definition]})"
        ],
        "description": "注册或获取全局过滤器"
    },
    "component": {
        "prefix": "VueComponent",
        "body": [
            "Vue.component(${id},${[definition]})"
        ],
        "description": "注册或获取全局组件。注册还会自动使用给定的id设置组件的名称"
    },
    "use": {
        "prefix": "VueUse",
        "body": [
            "Vue.use(${plugin})"
        ],
        "description": "安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法将被作为 Vue 的参数调用"
    },
    "mixin": {
        "prefix": "VueMixin",
        "body": [
            "Vue.mixin(${mixin})"
        ],
        "description": "全局注册一个混合，影响注册之后所有创建的每个 Vue 实例。插件作者可以使用混合，向组件注入自定义的行为。不推荐在应用代码中使用"
    },
    "compile": {
        "prefix": "VueCompile",
        "body": [
            "Vue.compile(${template})"
        ],
        "description": "在render函数中编译模板字符串。只在独立构建时有效"
    },

    "data": {
        "prefix": "data",
        "body": [
            "data () {\n\treturn {\n\t\t\t$0\n\t\t}\n}"
        ],
        "description": "Vue 实例的数据对象。Vue 将会递归将 data 的属性转换为 getter/setter，从而让 data 的属性能够响应数据变化。对象必须是纯粹的对象(含有零个或多个的key/value对)"
    },
    "props": {
        "prefix": "props",
        "body": [
            "props:[${String}]"
        ],
        "description": "props 可以是数组或对象，用于接收来自父组件的数据。props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义校验和设置默认值"
    },
    "propsData": {
        "prefix": "propsData",
        "body": [
            "propsData"
        ],
        "description": "创建实例时传递 props。主要作用是方便测试"
    },
    "computed": {
        "prefix": "computed",
        "body": [
            "computed:{\n\t$0\n}"
        ],
        "description": "计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例"
    },
    "methods": {
        "prefix": "methods",
        "body": [
            "methods:{\n\t$0\n}"
        ],
        "description": "methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例"
    },
    "watch": {
        "prefix": "watch",
        "body": [
            "watch:{\n\t$0\n}"
        ],
        "description": "一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性"
    },
    "el": {
        "prefix": "el",
        "body": [
            "el"
        ],
        "description": "提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例"
    },
    "template": {
        "prefix": "template",
        "body": [
            "<template>\n\t\t$0\n\t</template>"
        ],
        "description": "一个字符串模板作为 Vue 实例的标识使用。模板将会 替换 挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发 slot"
    },
    "render": {
        "prefix": "render",
        "body": [
            "render:function(${createElement},${context}){\n\t\t$0\n}"
        ],
        "description": "字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。render 函数接收一个 createElement 方法作为第一个参数用来创建 VNode\n如果组件是一个函数组件，Render 函数还会接收一个额外的 context 参数，为没有实例的函数组件提供上下文信息"
    },
    "beforeCreate": {
        "prefix": "beforeCreate",
        "body": [
            "beforeCreate(){\n\t$0\n}"
        ],
        "description": "在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用"
    },
    "created": {
        "prefix": "created",
        "body": [
            "created(){\n\t$0\n}"
        ],
        "description": "实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见"
    },
    "beforeMount": {
        "prefix": "beforeMount",
        "body": [
            "beforeMount(){\n\t$0\n}"
        ],
        "description": "在挂载开始之前被调用：相关的 render 函数首次被调用"
    },
    "mounted": {
        "prefix": "mounted",
        "body": [
            "mounted(){\n\t$0\n}"
        ],
        "description": "el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内"
    },
    "beforeUpdate": {
        "prefix": "beforeUpdate",
        "body": [
            "beforeUpdate(){\n\t$0\n}"
        ],
        "description": "数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前(该钩子在服务器端渲染期间不被调用)"
    },
    "updated": {
        "prefix": "updated",
        "body": [
            "updated(){\n\t$0\n}"
        ],
        "description": "由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子(该钩子在服务器端渲染期间不被调用)"
    },
    "activated": {
        "prefix": "activated",
        "body": [
            "activated(){\n\t$0\n}"
        ],
        "description": "keep-alive 组件激活时调用(该钩子在服务器端渲染期间不被调用)"
    },
    "deactivated": {
        "prefix": "deactivated",
        "body": [
            "deactivated(){\n\t$0\n}"
        ],
        "description": "keep-alive 组件停用时调用(该钩子在服务器端渲染期间不被调用)"
    },
    "beforeDestroy": {
        "prefix": "beforeDestroy",
        "body": [
            "beforeDestroy(){\n\t$0\n}"
        ],
        "description": "实例销毁之前调用。在这一步，实例仍然完全可用(该钩子在服务器端渲染期间不被调用)"
    },
    "destroyed": {
        "prefix": "destroyed",
        "body": [
            "destroyed(){\n\t$0\n}"
        ],
        "description": "Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁(该钩子在服务器端渲染期间不被调用)"
    },

    "directives": {
        "prefix": "directives",
        "body": [
            "directives:{\n\t$0\n}"
        ],
        "description": "注册局部指令，组件中接受一个 directives 的选项"
    },
    "filters": {
        "prefix": "filters",
        "body": [
            "filters:{\n\t$0\n}"
        ],
        "description": "注册局部过滤器，组件中接受一个filters的选项"
    },
    "components": {
        "prefix": "components",
        "body": [
            "components:{\n\t$0\n}"
        ],
        "description": "注册局部组件"
    },

    "parent": {
        "prefix": "parent",
        "body": [
            "parent"
        ],
        "description": "指定已创建的实例之父实例，在两者之间建立父子关系。"
    },
    "mixins": {
        "prefix": "mixins",
        "body": [
            "mixins:[$0]"
        ],
        "description": "mixins 选项接受一个混合对象的数组。这些混合实例对象可以像正常的实例对象一样包含选项,他们将在 Vue.extend() 里最终选择使用相同的选项合并逻辑合并。"
    },
    "extends": {
        "prefix": "extends",
        "body": [
            "extends"
        ],
        "description": "允许声明扩展另一个组件(可以是一个简单的选项对象或构造函数),而无需使用 Vue.extend。"
    },
    "delimiters": {
        "prefix": "delimiters",
        "body": [
            "delimiters"
        ],
        "description": "改变纯文本插入分隔符。 这个选择只有在独立构建时才有用"
    },
    "functional": {
        "prefix": "functional",
        "body": [
            "functional"
        ],
        "description": "使组件无状态（没有 data ）和无实例（没有 this 上下文）。他们用一个简单的 render 函数返回虚拟节点使他们更容易渲染"
    },

    "vm.$data": {
        "prefix": "vm$data",
        "body": [
            "\\$data"
        ],
        "description": "实例观察的数据对象。Vue 实例代理了对其 data 对象属性的访问"
    },
    "vm.$el": {
        "prefix": "$el",
        "body": [
            "\\$el"
        ],
        "description": "Vue 实例使用的根 DOM 元素"
    },
    "vm.$options": {
        "prefix": "vm$options",
        "body": [
            "\\$options"
        ],
        "description": "用于当前 Vue 实例的初始化选项。需要在选项中包含自定义属性时会有用处"
    },
    "vm.$parent": {
        "prefix": "vm$parent",
        "body": [
            "\\$parent"
        ],
        "description": "父实例，如果当前实例有的话"
    },
    "vm.$root": {
        "prefix": "vm$root",
        "body": [
            "\\$root$"
        ],
        "description": "当前组件树的根 Vue 实例。如果当前实例没有父实例，此实例将会是其自已"
    },
    "vm.$children": {
        "prefix": "vm$children",
        "body": [
            "\\$children"
        ],
        "description": "当前实例的直接子组件。需要注意 $children 并不保证顺序，也不是响应式的。"
    },
    "vm.$slots": {
        "prefix": "vm$slots",
        "body": [
            "\\$slots"
        ],
        "description": "用来访问被 slot 分发的内容,每个具名 slot 有其相应的属性"
    },
    "vm.$refs": {
        "prefix": "vm$refs",
        "body": [
            "\\$refs"
        ],
        "description": "一个对象，其中包含了所有拥有 ref 注册的子组件"
    },
    "vm.$isServer": {
        "prefix": "vm$isServer",
        "body": [
            "\\$isServer"
        ],
        "description": "当前 Vue 实例是否运行于服务器"
    },
    "vm.$watch": {
        "prefix": "vm$watch",
        "body": [
            "\\$watch(${expOrFn}, ${callback},{${0}})"
        ],
        "description": "观察 Vue 实例变化的一个表达式或计算属性函数。回调函数得到的参数为新值和旧值。表达式只接受监督的键路径。对于更复杂的表达式，用一个函数取代"
    },
    "vm.$set": {
        "prefix": "vm$set",
        "body": [
            "\\$set(${object}, ${key}, ${value})"
        ],
        "description": "这是全局 Vue.set 的别名"
    },
    "vm.$delete": {
        "prefix": "vm$delete",
        "body": [
            "\\$delete(${object}, ${key})"
        ],
        "description": "这是全局 Vue.delete 的别名"
    },

    "vm.$on": {
        "prefix": "vm$on",
        "body": [
            "\\$on('${event}', ${callback})"
        ],
        "description": "监听当前实例上的自定义事件。事件可以由vm.$emit触发。回调函数会接收所有传入事件触发函数的额外参数"
    },
    "vm.$once": {
        "prefix": "vm$once",
        "body": [
            "\\$once('${event}', ${callback})"
        ],
        "description": "监听一个自定义事件，但是只触发一次，在第一次触发之移除除监听器"
    },
    "vm.$off": {
        "prefix": "vm$off",
        "body": [
            "\\$off('${event}', ${callback})"
        ],
        "description": "移除事件监听器\n如果没有提供参数，则移除所有的事件监听器；\n如果只提供了事件，则移除该事件所有的监听器；\n如果同时提供了事件与回调，则只移除这个回调的监听器"
    },
    "vm.$emit": {
        "prefix": "vm$emit",
        "body": [
            "\\$emit('${event}', ${[…args]})"
        ],
        "description": "触发当前实例上的事件。附加参数都会传给监听器回调"
    },

    "vm.$mount": {
        "prefix": "vm$mount",
        "body": [
            "\\$mount(${elementOrSelector })"
        ],
        "description": "挂载实例：如果 Vue 实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。可以使用 vm.$mount() 手动地挂载一个未挂载的实例"
    },
    "vm.$forceUpdate": {
        "prefix": "vm$forceUpdate",
        "body": [
            "\\$forceUpdate()"
        ],
        "description": "迫使Vue实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件"
    },
    "vm.$nextTick": {
        "prefix": "vm$nextTick",
        "body": [
            "\\$nextTick(${callback})"
        ],
        "description": "将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。\n(2.1.0新增：如果没有提供回调且支持 promise 的环境中返回 promise)"
    },
    "vm.$destroy": {
        "prefix": "vm$destroy",
        "body": [
            "\\$destroy()"
        ],
        "description": "完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器"
    },
     "v-text": {
        "prefix": "vText",
        "body": [
            "v-text=\"${msg}\""
        ],
        "description": "更新元素的 textContent。如果要更新部分的 textContent ，需要使用 {{ Mustache }} 插值"
    },
    "v-html": {
        "prefix": "vHtml",
        "body": [
            "v-html=\"${html}\""
        ],
        "description": "更新元素的 innerHTML(注意：内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译)"
    },
    "v-if": {
        "prefix": "vIf",
        "body": [
            "v-if=\"${condition}\""
        ],
        "description": "根据表达式的值的真假条件渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。"
    },
    "v-show": {
        "prefix": "vShow",
        "body": [
            "v-show=\"${condition}\""
        ],
        "description": "根据表达式之真假值，切换元素的 display CSS 属性"
    },
    "v-else": {
        "prefix": "vElse",
        "body": [
            "v-else"
        ],
        "description": "前一兄弟元素必须有 v-if 或 v-else-if"
    },
    "v-else-if": {
        "prefix": "vElseIf",
        "body": [
            "v-else-if=\"${condition}\""
        ],
        "description": "(2.1新增)前一兄弟元素必须有 v-if 或 v-else-if"
    },
    "v-for": {
        "prefix": "vFor",
        "body": [
            "v-for=\"(${item},index) in ${items}\""
        ],
        "description": "基于源数据多次渲染元素或模板块"
    },
    "v-on": {
        "prefix": "vOn",
        "body": [
            "v-on:${event}=\"${handle}\""
        ],
        "description": "绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略"
    },
    "v-bind": {
        "prefix": "vBind",
        "body": [
            "v-bind:${argument}=\"${optional}\""
        ],
        "description": "动态地绑定一个或多个特性，或一个组件 prop 到表达式"
    },
    "v-model": {
        "prefix": "vModel",
        "body": [
            "v-model=\"${msg}\""
        ],
        "description": "在表单控件或者组件上创建双向绑定"
    },
    "v-pre": {
        "prefix": "vPre",
        "body": [
            "v-pre"
        ],
        "description": "跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译"
    },
    "v-cloak": {
        "prefix": "vCloak",
        "body": [
            "v-cloak"
        ],
        "description": "这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕"
    },
    "v-once": {
        "prefix": "vOnce",
        "body": [
            "v-once"
        ],
        "description": "只渲染元素和组件一次。随后的重新渲染,元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能"
    },
    "key": {
        "prefix": "key",
        "body": [
            "key=\"$0\""
        ],
        "description": "key 的特殊属性主要用在 Vue的虚拟DOM算法，在新旧nodes对比时辨识VNodes"
    },
    "ref": {
        "prefix": "ref",
        "body": [
            "ref=\"$0\""
        ],
        "description": "ref被用来给元素或子组件注册引用信息。引用信息会根据父组件的 $refs 对象进行注册。如果在普通的DOM元素上使用，引用信息就是元素; 如果用在子组件上，引用信息就是组件实例"
    },
     "solt": {
        "prefix": "solt",
        "body": [
            "solt=\"$0\""
        ],
        "description": "用于标记往哪个slot中插入子组件内容"
    },
    "keep-alive": {
        "prefix": "keepAlive",
        "body": [
            "<keep-alive include=\"$1\">\n\t$0\n</keep-alive>"
        ],
        "description": "<keep-alive> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们"
    },
    "transition": {
        "prefix": "transition",
        "body": [
            "<transition name=\"$1\" mode=\"$2\">\n\t$0\n</transition>"
        ],
        "description": "<transition> 元素作为单个元素/组件的过渡效果，不会渲染额外的 DOM 元素，也不会出现在检测过的组件层级中。它只是将内容包裹在其中，简单的运用过渡行为"
    },
    "transition-group": {
        "prefix": "transitionGroup",
        "body": [
            "<transition-group tag=\"$1\" name=\"$2\">\n\t$0\n</transition-group>"
        ],
        "description": "<transition-group> 元素作为多个元素/组件的过渡效果，渲染一个真实的 DOM 元素。默认渲染 <span>，可以通过 tag 属性配置哪个元素应该被渲染"
    },
    "VR": {
        "prefix": "VR",
        "body": [
            "import Vue from 'vue';\nimport Router from 'vue-router';\n\nVue.use(Router)\n\nexport default new Router({\n\tmode: '${history}',\n\tbase: ${__dirname},\n\troutes:[$0]\n})"
        ],
        "description": "[router]vue路由主文件模板"
    },
    "router-link": {
        "prefix": "router-link",
        "body": [
            "<router-link to=\"${path}\"></router-link>"
        ],
        "description": "[router]路由链接"
    },
  "router-view": {
        "prefix": "router-view",
        "body": [
            "<router-view name=\"${path}\"></router-view>"
        ],
        "description": "[router]路由视图，渲染路径匹配到的视图组件"
    },
  "path": {
        "prefix": "Path",
        "body": [
            "{ path: '$1', component:${2:component} }"
        ],
        "description": "[router]基础路由"
    },
  "pathName": {
        "prefix": "PathName",
        "body": [
            "{ path: '$1', name:'$2', component:${3:component} }"
        ],
        "description": "[router]命名路由"
    },
   "pathAsync": {
        "prefix": "PathAsync",
        "body": [
            "{ path: '$1', name:'$2', component: resolve => require(['$3'], resolve) }"
        ],
        "description": "[router]异步组件路由"
    },
    "pathChildren": {
        "prefix": "PathChildren",
        "body": [
            "{ path: '$1', name:'$2', component:${3:component},\n\t\tchildren:[\n\t\t\t$4\n\t]\n}"
        ],
        "description": "[router]嵌套路由，子路由"
    },
    "scrollBehavior": {
        "prefix": "scrollBehavior",
        "body": [
            "scrollBehavior (to, from, savedPosition){\n\t//return 期望滚动到哪个的位置\n\t$0\n}"
        ],
        "description": "[router]自定义路由切换时页面如何滚动"
    },
   "alias": {
        "prefix": "alias",
        "body": [
            "alias:$0"
        ],
        "description": "[router]别名路由"
    },
    "redirect": {
        "prefix": "redirect",
        "body": [
            "redirect:$0"
        ],
        "description": "[router]重定向路由"
    },
    "meta": {
        "prefix": "meta",
        "body": [
            "meta:{ $0 }"
        ],
        "description": "[router]路由元数据"
    },
    "router.app": {
        "prefix": "router.app",
        "body": [
            "router.app"
        ],
        "description": "[router]配置了 router 的 Vue 根实例"
    },
    "router.currentRoute": {
        "prefix": "router.currentRoute",
        "body": [
            "router.currentRoute"
        ],
        "description": "[router]当前路由对应的 路由信息对象."
    },
    "router.mode": {
        "prefix": "router.mode",
        "body": [
            "router.mode"
        ],
        "description": "[router]路由使用的模式"
    },
    "router.push": {
        "prefix": "router.push",
        "body": [
            "router.push(${path})"
        ],
        "description": "[router]跳转到指定URL，会向 history 添加新记录"
    },
    "router.replace": {
        "prefix": "router.replace",
        "body": [
            "router.replace(${path})"
        ],
        "description": "[router]替换掉当前URL，不会向 history 添加新记录"
    },
    "router.go": {
        "prefix": "router.go",
        "body": [
            "router.go(${number})"
        ],
        "description": "[router]在 history 记录中向前或者后退多少步"
    },
    "router.getMatchedComponents": {
        "prefix": "router.getMatchedComponents",
        "body": [
            "router.getMatchedComponents(${path})"
        ],
        "description": "[router]返回目标位置或是当前路由匹配的组件数组"
    },
    "router.resolve": {
        "prefix": "router.resolve",
        "body": [
            "router.resolve(${path})"
        ],
        "description": "[router]解析目标路由的位置"
    },
    "router.beforeEach": {
        "prefix": "router.beforeEach",
        "body": [
            "router.beforeEach((to, from, next) => {\n\t//to和from都是路由信息对象,next方法必须被调用\n\t$0\n})"
        ],
        "description": "[router]路由全局 before钩子，"
    },
    "router.afterEach": {
        "prefix": "router.afterEach",
        "body": [
            "router.afterEach( ${route} => {\n\t//没有nex方法，不能改变导航\n\t$0\n})"
        ],
        "description": "[router]路由全局after钩子，"
    },
    "beforeRouteEnter": {
        "prefix": "beforeRouteEnter",
        "body": [
            "beforeRouteEnter((to, from, next) => {\n\t//在渲染该组件的对应路由被 confirm 前调用(不！能！获取组件实例 `this`)\n\t$0\n})"
        ],
        "description": "[router]组件内局部钩子"
    },
    "beforeRouteLeave": {
        "prefix": "beforeRouteLeave",
        "body": [
            "beforeRouteLeave((to, from, next) => {\n\t//导航离开该组件的对应路由时调用(可以获取组件实例 `this`)\n\t$0\n})"
        ],
        "description": "[router]组件内局部钩子"
    },
    "$route.path": {
        "prefix": "vm$route.path",
        "body": [
            "\\$route.path"
        ],
        "description": "[router]返回当前路由的路径，总是解析为绝对路径"
    },
    "$route.params": {
        "prefix": "vm$route.params",
        "body": [
            "\\$route.params"
        ],
        "description": "[router]返回路由参数，一个 key/value 对象"
    },
    "$route.query": {
        "prefix": "vm$route.query",
        "body": [
            "\\$route.query"
        ],
        "description": "[router]返回URL查询参数，一个 key/value 对象"
    },
    "$route.hash": {
        "prefix": "vm$route.hash",
        "body": [
            "\\$route.hash"
        ],
        "description": "[router]返回当前路由的hash值(不带#)"
    },
    "$route.fullPath": {
        "prefix": "vm$route.fullPath",
        "body": [
            "\\$route.fullPath"
        ],
        "description": "[router]返回包含查询参数和hash的完整路径"
    },
    "$route.matched": {
        "prefix": "vm$route.matched",
        "body": [
            "\\$route.matched"
        ],
        "description": "[router]返回包含当前路由的所有嵌套路径片段的路由记录数组，路由记录就是 routes 配置数组中的对象副本"
    },
    "$route.name": {
        "prefix": "vm$route.name",
        "body": [
            "\\$$route.name"
        ],
        "description": "[router]返回当前路由的名称"
    },
  "Vuex": {
        "prefix": "VX",
        "body": [
            "import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n\tstrict: process.env.NODE_ENV !== 'production',\n\t$0\n})"
        ],
        "description": "[vuex]vuex主文件模板"
  },	
 "state": {
        "prefix": "state",
        "body": [
            "state: {\n\t$0\n}"
        ],
        "description": "[vuex]应用层级的单一状态树"
  },
 "mutations": {
        "prefix": "mutations",
        "body": [
            "mutations: {\n\t$0\n}"
        ],
        "description": "[vuex]更改状态state的方法函数"
  },
  "actions": {
        "prefix": "actions",
        "body": [
            "actions: {\n\t$0\n}"
        ],
        "description": "[vuex]触发更改状态函数mutations的方法"
  },
  "getters": {
        "prefix": "getters",
        "body": [
            "getters: {\n\t$0\n}"
        ],
        "description": "[vuex]计算过滤状态state并暴露给外部使用"
  },
  "modules": {
        "prefix": "modules",
        "body": [
            "modules: {\n\t$0\n}"
        ],
        "description": "[vuex]store模块"
  },
  "store.commit": {
        "prefix": "store.commit",
        "body": [
            "store.commit('${MUTATIONS}',${payload})"
        ],
        "description": "[vuex]提交mutation"
  },
  "store.dispatch": {
        "prefix": "store.dispatch",
        "body": [
            "store.dispatch('${action}',${payload})"
        ],
        "description": "[vuex]分发action,返回 action 方法的返回值，如果多个处理函数被触发，那么返回一个 Pormise"
  },
  "store.replaceState": {
        "prefix": "store.replaceState",
        "body": [
            "store.replaceState(${state})"
        ],
        "description": "[vuex]替换 store 的根状态，仅用状态合并或 time-travel 调试"
  },
  "store.watch": {
        "prefix": "store.watch",
        "body": [
            "store.watch(${getter},${handler})"
        ],
        "description": "[vuex]响应式地监测一个 getter 方法的返回值，当值改变时调用回调函数"
  },
  "store.subscribe": {
        "prefix": "store.subscribe",
        "body": [
            "store.subscribe(${handler})"
        ],
        "description": "[vuex]注册监听 store 的 mutation。handler 会在每个 mutation 完成后调用，接收 mutation 和经过 mutation 后的状态作为参数"
  },
  "store.registerModule": {
        "prefix": "store.registerModule",
        "body": [
            "store.registerModule(${string},${Module})"
        ],
        "description": "[vuex]注册一个动态模块"
  },
  "store.unregisterModule": {
        "prefix": "store.unregisterModule",
        "body": [
            "store.unregisterModule(${string})"
        ],
        "description": "[vuex]卸载一个动态模块"
  },
 "store.hotUpdate": {
        "prefix": "store.hotUpdate",
        "body": [
            "store.hotUpdate({$0})"
        ],
        "description": "[vuex]热替换新的 action 和 mutation"
  },
 "mapState": {
        "prefix": "mapState",
        "body": [
            "mapState(${1:[]|{\\}})"
        ],
        "description": "[vuex]创建组件的计算属性返回Vuex store中的状态"
  },
 "mapGetters": {
        "prefix": "mapGetters",
        "body": [
            "mapGetters(${1:[]|{\\}})"
        ],
        "description": "[vuex]创建组件的计算属性返回getter的返回值"
  },
  "mapActions": {
        "prefix": "mapActions",
        "body": [
            "mapActions(${1:[]|{\\}})"
        ],
        "description": "[vuex]创建组件方法分发action"
  },
  "mapMutations": {
        "prefix": "mapMutations",
        "body": [
            "mapMutations(${1:[]|{\\}})"
        ],
        "description": "[vuex]创建组件方法提交mutation"
  },
  "$store": {
        "prefix": "vm$store",
        "body": [
            "\\$store"
        ],
        "description": "[router]$store"
 }

}